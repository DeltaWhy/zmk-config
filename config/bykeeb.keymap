/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/mouse.h>
#include <behaviors/mouse_keys.dtsi>
 
#define BASE 0
#define NAV  1
#define NUM  2
#define ADJ  3

#define LSPO &hm LSHFT LS(N9)
#define RSPC &hm RSHFT RS(N0)

&caps_word {
    continue-list = <UNDERSCORE MINUS BACKSPACE DELETE>;
};

&mt {
  quick-tap-ms = <100>;
  global-quick-tap;
  flavor = "tap-preferred";
  tapping-term-ms = <170>;
};

/ {
    combos {
        compatible = "zmk,combos";
        combo_bootloader {
            timeout-ms = <50>;
            key-positions = <0 9>;
            bindings = <&bootloader>;

        };
        combo_lbrc {
            timeout-ms = <50>;
            key-positions = <14 24>;
            bindings = <&kp LS(LBKT)>;
        };
        combo_rbrc {
            timeout-ms = <50>;
            key-positions = <15 25>;
            bindings = <&kp RS(RBKT)>;
        };
        combo_lbkt {
            timeout-ms = <50>;
            key-positions = <4 14>;
            bindings = <&kp LBKT>;
        };
        combo_rbkt {
            timeout-ms = <50>;
            key-positions = <5 15>;
            bindings = <&kp RBKT>;
        };
        combo_capsword {
            timeout-ms = <50>;
            key-positions = <14 15>;
            bindings = <&caps_word>;
        };
        combo_lpar {
            timeout-ms = <50>;
            key-positions = <13 14>;
            bindings = <&kp LS(N9)>;
        };
        combo_rpar {
            timeout-ms = <50>;
            key-positions = <15 16>;
            bindings = <&kp RS(N0)>;
        };
    };

    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick_tap_ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };
        hs: homerow_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_SHIFT";
            #binding-cells = <2>;
            tapping-term-ms = <175>;
            quick_tap_ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };
        coln: inverted_colon {
            compatible = "zmk,behavior-mod-morph";
            label = "COLON";
            #binding-cells = <0>;
            bindings = <&kp LS(SCLN)>, <&kp SCLN>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <NAV NUM>;
            then-layer = <ADJ>;
        };
    };
 
        keymap {
                compatible = "zmk,keymap";
                base_layer {
label= "BASE"                              ;
 bindings = <
// ╷           ╷           ╷           ╷           ╷           ╷           ╷   ╷           ╷           ╷           ╷           ╷           ╷           ╷

                &kp Q       &kp W       &kp F       &kp P       &kp B           &kp J       &kp L       &kp U       &kp Y       &kp SQT
                &hm LGUI A  &hm LALT R  &hm LCTRL S &hs LSHFT T &kp G           &kp M       &hs RSHFT N &hm RCTRL E &hm LALT I  &hm RGUI O
    &kp Z       &hm RALT X  &kp C       &kp D       &kp V           &kp K       &kp H       &kp COMMA   &hm RALT DOT &kp FSLH    
                                          &mo NAV       &kp SPC  &kp TAB  &kp ENTER   &kp BSPC &mo NUM
                        >;
                };

        nav_layer {
            label = "Navigation";
            
            bindings = <
    &trans       &trans       &trans      &trans        &trans                                 &kp ESC       &trans       &trans        &trans      &trans
    &kp LGUI     &kp LALT     &kp LCTL    &kp LSFT      &trans                                 &kp MINUS     &kp LEFT     &kp DOWN      &kp UP      &kp RIGHT
    &trans       &kp RALT     &trans      &trans        &trans                                 &kp DEL       &kp HOME     &kp PGDN      &kp PGUP    &kp END
                                          &trans        &trans       &trans        &trans      &trans        &trans
            >;
        };

        num_layer {
            label = "Numbers";
            
            bindings = <
    &kp LBKT     &kp N7       &kp N8      &kp N9        &kp RBKT                                    &kp ESC       &trans       &trans        &trans      &trans
    &coln        &kp N4       &kp N5      &kp N6        &kp EQL                                     &kp MINUS     &kp RSFT     &kp RCTL      &kp LALT    &kp RGUI
    &kp GRAVE    &kp N1       &kp N2      &kp N3        &kp BSLH                                    &kp DEL       &trans       &trans        &kp RALT    &trans
                                          &trans        &kp N0       &kp DOT       &trans           &trans        &trans
            >;
        };

        adj_layer {
            label = "Adjust";
            
            bindings = <
    &kp F12      &kp F7       &kp F8      &kp F9        &kp PSCRN                                   &bt BT_CLR    &bt BT_SEL 0 &bt BT_SEL 1  &bt BT_SEL 2 &bt BT_SEL 3
    &kp F11      &kp F4       &kp F5      &kp F6        &kp SLCK                                    &out OUT_BLE  &kp RSFT     &kp RCTL      &kp LALT    &kp RGUI
    &kp F10      &kp F1       &kp F2      &kp F3        &kp PAUSE_BREAK                             &out OUT_USB  &trans       &trans        &kp RALT    &trans
                                          &trans        &trans       &trans        &trans           &trans        &trans
            >;
        };
        };
};
